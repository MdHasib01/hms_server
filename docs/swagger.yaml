basePath: /v1
definitions:
  main.CreateAppointmentPayload:
    properties:
      appointment_time:
        type: string
      doctor_id:
        type: string
      patient_id:
        type: string
    required:
    - appointment_time
    - doctor_id
    - patient_id
    type: object
  main.CreateAvailabilityPayload:
    properties:
      available_day:
        type: string
      doctor_id:
        type: string
      ends_at:
        type: string
      starts_from:
        type: string
    type: object
  main.CreateDoctorPayload:
    properties:
      address:
        type: string
      age:
        type: string
      blood_group:
        type: string
      city:
        type: string
      country:
        type: string
      designation:
        type: string
      email:
        maxLength: 255
        type: string
      firstname:
        maxLength: 100
        type: string
      gender:
        type: string
      lastname:
        maxLength: 100
        type: string
      license_number:
        type: string
      marital_status:
        type: string
      password:
        maxLength: 72
        minLength: 3
        type: string
      postal_code:
        type: string
      qualification:
        type: string
      specialization:
        type: string
      state:
        type: string
      username:
        maxLength: 100
        type: string
    required:
    - address
    - age
    - blood_group
    - city
    - country
    - designation
    - email
    - firstname
    - gender
    - lastname
    - license_number
    - marital_status
    - password
    - postal_code
    - qualification
    - specialization
    - state
    - username
    type: object
  main.CreateUserTokenPayload:
    properties:
      email:
        maxLength: 255
        type: string
      password:
        maxLength: 72
        minLength: 3
        type: string
    required:
    - email
    - password
    type: object
  main.RegisterUserPayload:
    properties:
      email:
        maxLength: 255
        type: string
      password:
        maxLength: 72
        minLength: 3
        type: string
      username:
        maxLength: 100
        type: string
    required:
    - email
    - password
    - username
    type: object
  main.UserWithToken:
    properties:
      created_at:
        type: string
      email:
        type: string
      id:
        type: string
      is_active:
        type: boolean
      role:
        $ref: '#/definitions/store.Role'
      role_id:
        type: integer
      token:
        type: string
      username:
        type: string
    type: object
  store.Appointment:
    properties:
      appointment_time:
        type: string
      doctor_first_name:
        type: string
      doctor_id:
        type: string
      doctor_last_name:
        type: string
      id:
        type: string
      patient_first_name:
        type: string
      patient_id:
        type: string
      patient_last_name:
        type: string
    type: object
  store.Availability:
    properties:
      available_day:
        type: string
      doctor_id:
        type: string
      ends_at:
        type: string
      starts_from:
        type: string
    type: object
  store.Doctor:
    properties:
      address:
        type: string
      age:
        type: string
      availability:
        items:
          type: string
        type: array
      blood_group:
        type: string
      city:
        type: string
      country:
        type: string
      designation:
        type: string
      email:
        type: string
      firstname:
        type: string
      gender:
        type: string
      lastname:
        type: string
      license_number:
        type: string
      marital_status:
        type: string
      postal_code:
        type: string
      qualification:
        type: string
      specialization:
        type: string
      state:
        type: string
      user_id:
        type: string
      username:
        type: string
    type: object
  store.Role:
    properties:
      description:
        type: string
      id:
        type: integer
      level:
        type: integer
      name:
        type: string
    type: object
  store.User:
    properties:
      created_at:
        type: string
      email:
        type: string
      id:
        type: string
      is_active:
        type: boolean
      role:
        $ref: '#/definitions/store.Role'
      role_id:
        type: integer
      username:
        type: string
    type: object
  store.UserMinimal:
    properties:
      email:
        type: string
      id:
        type: string
    type: object
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: API for GopherSocial, a social network for gohpers
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: GopherSocial API
paths:
  /appointments:
    get:
      consumes:
      - application/json
      description: Retrieves all appointments, showing patient and doctor names with
        appointment times
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/store.Appointment'
            type: array
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Get all appointments with patient and doctor info
      tags:
      - appointment
    post:
      consumes:
      - application/json
      description: Creates a new appointment
      parameters:
      - description: Appointment Details
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/main.CreateAppointmentPayload'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/store.Appointment'
        "400":
          description: Bad Request
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Create new appointment
      tags:
      - appointment
  /authentication/token:
    post:
      consumes:
      - application/json
      description: Creates a token for a user
      parameters:
      - description: User credentials
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/main.CreateUserTokenPayload'
      produces:
      - application/json
      responses:
        "200":
          description: Token
          schema:
            type: string
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Creates a token
      tags:
      - authentication
  /authentication/user:
    post:
      consumes:
      - application/json
      description: Registers a user
      parameters:
      - description: User credentials
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/main.RegisterUserPayload'
      produces:
      - application/json
      responses:
        "201":
          description: User registered
          schema:
            $ref: '#/definitions/main.UserWithToken'
        "400":
          description: Bad Request
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Registers a user
      tags:
      - authentication
  /doctors:
    get:
      consumes:
      - application/json
      description: Fetches all doctors
      produces:
      - application/json
      responses:
        "204":
          description: Doctors Found
          schema:
            items:
              items:
                $ref: '#/definitions/store.Doctor'
              type: array
            type: array
        "400":
          description: Doctor Id  missing
          schema: {}
        "404":
          description: Dctor not found
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Fetches All doctors
      tags:
      - doctor
    post:
      consumes:
      - application/json
      description: Creates a new doctor user and doctor profile
      parameters:
      - description: Doctor user and profile information
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/main.CreateDoctorPayload'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/store.Doctor'
        "400":
          description: Bad Request
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Creates a doctor account
      tags:
      - doctor
  /doctors/{doctorID}:
    get:
      consumes:
      - application/json
      description: Fetches the doctor by id
      parameters:
      - description: Doctor ID
        in: path
        name: doctorID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: Doctor Found
          schema:
            type: string
        "400":
          description: Doctor Id  missing
          schema: {}
        "404":
          description: Dctor not found
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Fetches the doctor by id
      tags:
      - doctor
  /doctors/availability:
    post:
      consumes:
      - application/json
      description: Creates an availability entry for a doctor
      parameters:
      - description: Availability details
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/main.CreateAvailabilityPayload'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/store.Availability'
        "400":
          description: Bad Request
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Creates a new availability entry
      tags:
      - doctor
  /health:
    get:
      description: Healthcheck endpoint
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            type: string
      summary: Healthcheck
      tags:
      - ops
  /users/{id}:
    get:
      consumes:
      - application/json
      description: Fetches a user profile by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/store.User'
        "400":
          description: Bad Request
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Fetches a user profile
      tags:
      - users
  /users/activate/{token}:
    put:
      description: Activates/Register a user by invitation token
      parameters:
      - description: Invitation token
        in: path
        name: token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: User activated
          schema:
            type: string
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Activates/Register a user
      tags:
      - users
  /users/patients:
    get:
      description: Returns a list of users with role_id = 1 (patients)
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/store.UserMinimal'
            type: array
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Get all patients
      tags:
      - users
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
